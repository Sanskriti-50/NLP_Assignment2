import math

# Define the value of k for smoothing
k = 0.1

total_perp = 0
count_sent = 0

for sentence in validation_set:
    count_sent += 1
    if len(sentence) < 2:
        continue
    else:
        perp = 1
        n = len(sentence)
        log_perp = 0
        for i in range(1, n):
            n_gram = (sentence[i - 1], sentence[i])

           
            
             
            smooth_prob =  (bigrams.get(n_gram, 0) + k)/(unigrams.get(n_gram[0], 0) + (k * len(unigrams)))

            log_perp += math.log(smooth_prob)

        log_perp = (1 / n) * log_perp

        total_perp += math.exp(log_perp)

print("average perplexity of add-k smoothed bigram is:", total_perp / count_sent)
#     For k=0.5
k=0.5
total_perp = 0
count_sent = 0

for sentence in validation_set:
    count_sent += 1
    if len(sentence) < 2:
        continue
    else:
        perp = 1
        n = len(sentence)
        log_perp = 0
        for i in range(1, n):
            n_gram = (sentence[i - 1], sentence[i])

           
            
             
            smooth_prob =  (bigrams.get(n_gram, 0) + k)/(unigrams.get(n_gram[0], 0) + (k * len(unigrams)))

            log_perp += math.log(smooth_prob)

        log_perp = (1 / n) * log_perp

        total_perp += math.exp(log_perp)

print("average perplexity of add-k smoothed bigram is:", total_perp / count_sent)
#For k=2.5
k= 2.5
total_perp = 0
count_sent = 0

for sentence in validation_set:
    count_sent += 1
    if len(sentence) < 2:
        continue
    else:
        perp = 1
        n = len(sentence)
        log_perp = 0
        for i in range(1, n):
            n_gram = (sentence[i - 1], sentence[i])

           
            
             
            smooth_prob =  (bigrams.get(n_gram, 0) + k)/(unigrams.get(n_gram[0], 0) + (k * len(unigrams)))

            log_perp += math.log(smooth_prob)

        log_perp = (1 / n) * log_perp

        total_perp += math.exp(log_perp)

print("average perplexity of add-k smoothed bigram is:", total_perp / count_sent)
# For k= 5
total_perp = 0
count_sent = 0
k=5
for sentence in validation_set:
    count_sent += 1
    if len(sentence) < 2:
        continue
    else:
        perp = 1
        n = len(sentence)
        log_perp = 0
        for i in range(1, n):
            n_gram = (sentence[i - 1], sentence[i])

           
            
             
            smooth_prob =  (bigrams.get(n_gram, 0) + k)/(unigrams.get(n_gram[0], 0) + (k * len(unigrams)))

            log_perp += math.log(smooth_prob)

        log_perp = (1 / n) * log_perp

        total_perp += math.exp(log_perp)

print("average perplexity of add-k smoothed bigram is:", total_perp / count_sent)

#For k= 10
k=10
total_perp = 0
count_sent = 0

for sentence in validation_set:
    count_sent += 1
    if len(sentence) < 2:
        continue
    else:
        perp = 1
        n = len(sentence)
        log_perp = 0
        for i in range(1, n):
            n_gram = (sentence[i - 1], sentence[i])

           
            
             
            smooth_prob =  (bigrams.get(n_gram, 0) + k)/(unigrams.get(n_gram[0], 0) + (k * len(unigrams)))

            log_perp += math.log(smooth_prob)

        log_perp = (1 / n) * log_perp

        total_perp += math.exp(log_perp)

print("average perplexity of add-k smoothed bigram is:", total_perp / count_sent)
